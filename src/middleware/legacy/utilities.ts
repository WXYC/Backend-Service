import { NextFunction, Request, Response } from "express";
import { Config, NodeSSH } from "node-ssh";
import { sseBroker } from "./sse.js";

type MirrorOptions = {
  failMode?: "throw" | "soft";
  connectTimeoutMs?: number;
};

const broadcastMirror = (req: Request, data: any) => {
  sseBroker.broadcast("backend-mirror", {
    method: req.method,
    path: req.path,
    at: new Date().toISOString(),
    data,
  });
};

export const createBackendMirrorMiddleware =
  (createCommand: (req: Request) => string, opts: MirrorOptions = {}) =>
  async (req: Request, res: Response, next: NextFunction) => {
    const { failMode = "throw", connectTimeoutMs = 15000 } = opts;
    const ssh = new NodeSSH();
    const sshConfig: Config = {
      host: process.env.SSH_HOST,
      username: process.env.SSH_USERNAME,
      password: process.env.SSH_PASSWORD,
      readyTimeout: 15000,
    };

    // Helper: safely single-quote for shell env assignment
    const shSingleQuote = (s: string) => s.replace(/'/g, `'\\''`);

    const sql = (createCommand(req) || "").trim();
    if (!sql) return next(new Error("Empty SQL generated by createSql(req)."));

    const remotePwd = process.env.REMOTE_DB_PASSWORD ?? "";
    const mysqlCommand = `
        MYSQL_PWD='${shSingleQuote(remotePwd)}' \\
        mysql -u ${process.env.REMOTE_DB_USER ?? ""} \\
              -h ${process.env.REMOTE_DB_HOST ?? ""} \\
              -D ${process.env.REMOTE_DB_NAME ?? ""} \\
              --protocol=TCP \\
              --connect-timeout=10 \\
              --batch --raw --silent <<'__SQL__'
${sql}
__SQL__
      `.trim();

    try {
      await ssh.connect(sshConfig);

      const { stdout, stderr, code } = await ssh.execCommand(mysqlCommand, {});

      res.locals.backendMirror = {
        ok: !stderr.trim(),
        stdout,
        stderr: stderr || undefined,
        exitCode: code ?? undefined,
        cmd: mysqlCommand,
      };

      if (res.locals.backendMirror.ok) {
        return next();
      } else if (failMode === "soft") {
        return next();
      } else {
        return next(
          new Error(
            `Backend mirror error: ${res.locals.backendMirror.stderr || "(no error message)"}`
          )
        );
      }
    } catch (err: any) {
      if (failMode === "soft") {
        res.locals.backendMirror = {
          ok: false,
          stdout: "",
          stderr: String((err as Error).message || err),
          cmd: sql,
        };
        return next();
      } else {
        return next(
          new Error(
            `Backend mirror SSH error: ${String((err as Error).message || err) || "(no error message)"}`
          )
        );
      }
    } finally {
      try {
        broadcastMirror(req, res.locals.backendMirror);
        ssh.dispose();
      } catch {}
    }
  };
