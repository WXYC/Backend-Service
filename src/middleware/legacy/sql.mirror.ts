import { Config, NodeSSH } from "node-ssh";

export class MirrorSQL {
  private static _instance: MirrorSQL | null = null;
  private static _ssh: NodeSSH | null = null;

  static instance() {
    if (!this._instance) this._instance = new MirrorSQL();
    return this._instance;
  }

  static async sshInstance() {
    if (!this._ssh) this._ssh = new NodeSSH();

    const sshConfig: Config = {
      host: process.env.SSH_HOST,
      username: process.env.SSH_USERNAME,
      password: process.env.SSH_PASSWORD,
      readyTimeout: 15000,
    };

    if (!this._ssh.isConnected()) {
      await this._ssh.connect(sshConfig);
    }

    setTimeout(
      () => {
        if (this._ssh && this._ssh.isConnected()) {
          this._ssh.dispose();
          this._ssh = null;
        }
      },
      5 * 60 * 1000
    ); // auto-dispose after 5 minutes of inactivity

    return this._ssh;
  }

  private static shSingleQuote = (s: string) => s.replace(/'/g, `'\\''`);
  private static getRemotePwd = () => process.env.REMOTE_DB_PASSWORD ?? "";

  private static makeSqlCommand = (sql: string) =>
    `
        MYSQL_PWD='${MirrorSQL.shSingleQuote(MirrorSQL.getRemotePwd())}' \\
        mysql -u ${process.env.REMOTE_DB_USER ?? ""} \\
              -h ${process.env.REMOTE_DB_HOST ?? ""} \\
              -D ${process.env.REMOTE_DB_NAME ?? ""} \\
              --protocol=TCP \\
              --connect-timeout=10 \\
              --batch --raw --silent <<'__SQL__'
${sql}
__SQL__
      `.trim();

  async send(sql: string) {
    if (!sql || sql.length == 0)
      throw new Error("Empty SQL generated by createSql(req).");

    const ssh = await MirrorSQL.sshInstance();
    const mysqlCommand = MirrorSQL.makeSqlCommand(sql.trim());

    const { stdout, stderr, code } = await ssh.execCommand(mysqlCommand, {});

    let ok = true;
    if (code !== 0) {
      ok = false;
    } else if (stderr && stderr.length > 0) {
      ok = false;
    }

    if (!ok) {
      const err = new Error(
        `Error executing remote SQL command over SSH. exitCode=${code}, stderr=${stderr}, stdout=${stdout}`
      );
      throw err;
    }

    return stdout;
  }
}
